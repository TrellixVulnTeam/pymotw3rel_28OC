<?xml version="1.0" encoding="Latin-1"?>
<target>3</target>
<categoria>Matematica</categoria><!-- # tag <descrizione> contiene le voci per la tabella di riepilogo iniziale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- tag <testo_normale> contiene il testo normale dell'articolo -->
<!-- tag <titolo_2> contiene il testo per l'intestazione di un paragrafo -->
<!-- tag <py_code> contiene il testo che rappresenta delle istruzioni python -->
<!-- tag <py_output> contiene il testo che rappresenta l'outpuy di uno script python -->
<!-- tag <vedi_anche> contiene il testo che rappresentano i riferimenti esterni -->
<documento_tradotto>
<titolo_1>
fractions - Numeri Razionali
</titolo_1>
<descrizione>
Implementa una classe per lavorare coi numeri razionali

</descrizione>
<testo_normale>
La classe <code>Fraction</code> implementa operazioni numeriche su numeri razionali basate sull'<a href="https://it.wikipedia.org/wiki/Application_programming_interface">API</a> definita nel modulo <code>mumbers</code> da <code>Rational</code>.
</testo_normale>
<titolo_2>
Creare Istanze di Fraction
</titolo_2>
<testo_normale>
Così come per il modulo <code>decimal</code> nuovi valori possono essere creati in svariati modi. Uno dei più facili è crearli da valori di numeratore e denominatore separati.
</testo_normale>
<py_code>
# fractions_create_integers.py

import fractions

for n, d in [(1, 2), (2, 4), (3, 6)]:
    f = fractions.Fraction(n, d)
    print('{}/{} = {}'.format(n, d, f))
</py_code>
<testo_normale>
Il comun denominatore più basso viene mantenuto mentre vengono calcolati i nuovi valori.
</testo_normale>
<py_output>
$ python3 fractions_create_integers.py

1/2 = 1/2
2/4 = 1/2
3/6 = 1/2
</py_output>
<testo_normale>
Un altro modo di creare una frazione con <code>Fraction</code> è usare una rappresentazione stringa di numeratore/denominatore.
</testo_normale>
<py_code>
# fractions_create_strings.py

import fractions

for s in ['1/2', '2/4', '3/6']:
    f = fractions.Fraction(s)
    print('{} = {}'.format(s, f))
</py_code>
<testo_normale>
La stringa viene elaborata per trovare i valori di numeratore e denominatore.
</testo_normale>
<py_output>
3 fractions_create_strings.py

1/2 = 1/2
2/4 = 1/2
3/6 = 1/2
</py_output>
<testo_normale>
Le stringhe possono anche utilizzare la più comune notazione decimale od a virgola mobile di serie di cifre separate da un punto. E' supportata qualsiasi stringa che possa essere elaborata da <code>float()</code> e che non rappresenti un "non numero" (<a href="https://it.wikipedia.org/wiki/NaN">NaN</a>) oppure un valore infinito.
</testo_normale>
<py_code>
# fractions_create_strings_floats.py

import fractions

for s in ['0.5', '1.5', '2.0', '5e-1']:
    f = fractions.Fraction(s)
    print('{0:>4} = {1}'.format(s, f))
</py_code>
<testo_normale>
I valori del numeratore ed il denominatore rappresentati dal valore a virgola mobile vengono calcolati automaticamente.
</testo_normale>
<py_output>
$ python3 fractions_create_strings_floats.py

 0.5 = 1/2
 1.5 = 3/2
 2.0 = 2
5e-1 = 1/2
</py_output>
<testo_normale>
E' anche possibile creare instanze di <code>Fraction</code> direttamente da altre rappresentazioni di valori razionali, tipo <code>float</code> o <code>Decimal</code>.
</testo_normale>
<py_code>
# fractions_from_float.py

import fractions

for v in [0.1, 0.5, 1.5, 2.0]:
    print('{} = {}'.format(v, fractions.Fraction(v)))
</py_code>
<testo_normale>
I valori a virgola mobile che non possono essere espressi esattamente potrebbero contenere risultati inaspettati.
</testo_normale>
<py_output>
$ python3 fractions_from_float.py

0.1 = 3602879701896397/36028797018963968
0.5 = 1/2
1.5 = 3/2
2.0 = 2
</py_output>
<testo_normale>
L'utilizzo di rappresentazioni <code>decimal</code> dei valori fa ottenere i risultati attesi.
</testo_normale>
<py_code>
# fractions_from_decimal.py

import decimal
import fractions

values = [
    decimal.Decimal('0.1'),
    decimal.Decimal('0.5'),
    decimal.Decimal('1.5'),
    decimal.Decimal('2.0'),
]

for v in values:
    print('{} = {}'.format(v, fractions.Fraction(v)))
</py_code>
<testo_normale>
L'implementazione interna di <code>decimal</code> non subisce gli errori di precisione propri della rappresentazione standard dei valori a virgola mobile.
</testo_normale>
<py_output>
$ python3 fractions_arithmetic.py

1/2 + 3/4 = 5/4
1/2 - 3/4 = -1/4
1/2 * 3/4 = 3/8
1/2 / 3/4 = 2/3
</py_output>
<titolo_2>
Aritmetica
</titolo_2>
<testo_normale>
Una volta che le frazioni sono state istanziate, possono essere utilizzate in espressioni matematiche.
</testo_normale>
<py_code>
# fractions_arithmetic.py

import fractions

f1 = fractions.Fraction(1, 2)
f2 = fractions.Fraction(3, 4)

print('{} + {} = {}'.format(f1, f2, f1 + f2))
print('{} - {} = {}'.format(f1, f2, f1 - f2))
print('{} * {} = {}'.format(f1, f2, f1 * f2))
print('{} / {} = {}'.format(f1, f2, f1 / f2))
</py_code>
<testo_normale>
Sono supportati tutti gli operatori standard.
</testo_normale>
<py_output>
$ python3 fractions_from_decimal.py

0.1 = 1/10
0.5 = 1/2
1.5 = 3/2
2.0 = 2
</py_output>
<titolo_2>
Approssimazione dei Valori
</titolo_2>
<testo_normale>
Una utile caratteristica di <code>Fraction</code> è la capacità di convertire un numero a virgola mobile in un valore razionale approssimato.
</testo_normale>
<py_code>
# fractions_limit_denominator.py

import fractions
import math

print('PI       =', math.pi)

f_pi = fractions.Fraction(str(math.pi))
print('Nessun limite =', f_pi)

for i in [1, 6, 11, 60, 70, 90, 100]:
    limited = f_pi.limit_denominator(i)
    print('{0:8} = {1}'.format(i, limited))
</py_code>
<testo_normale>
Il valore della frazione può essere controllato limitando la dimensione del denominatore.
</testo_normale>
<py_output>
$ python3 fractions_limit_denominator.py

PI       = 3.141592653589793
Nessun limite = 3141592653589793/1000000000000000
       1 = 3
       6 = 19/6
      11 = 22/7
      60 = 179/57
      70 = 201/64
      90 = 267/85
     100 = 311/99
</py_output>
<vedi_anche>
http://docs.python.org/3.5/library/fractions.html|fractions|La documentazione della libreria standard per questo modulo.
riferimenti_moduli_modificati.html#fractions_porting|Note di portabilità|Le note di portabilità per fractions
</vedi_anche>
</documento_tradotto>
