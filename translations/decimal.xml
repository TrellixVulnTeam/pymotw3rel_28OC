<?xml version="1.0" encoding="Latin-1"?>
<categoria>Matematica</categoria><!-- # tag <descrizione> contiene le voci per la tabella di riepilogo iniziale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- tag <testo_normale> contiene il testo normale dell'articolo -->
<!-- tag <titolo_2> contiene il testo per l'intestazione di un paragrafo -->
<!-- tag <py_code> contiene il testo che rappresenta delle istruzioni python -->
<!-- tag <py_output> contiene il testo che rappresenta l'outpuy di uno script python -->
<!-- tag <vedi_anche> contiene il testo che rappresentano i riferimenti esterni -->
<!-- tag <lista> ogni riga all'interno del tag rappresenta una riga di una lista non ordinata'-->
<documento_tradotto>
<titolo_1>
decimal - Matematica per Valori Fissi ed a Virgola Mobile
</titolo_1>
<descrizione>
Aritmetica decimale usando valori fissi ed a virgola mobile

</descrizione>
<testo_normale>
Il modulo <strong>decimal</strong> implementa artimetica su valori fissi ed a virgola mobile usando il modello familiare alla maggior parte delle persone, piuttosto che la versione a virgola mobile <a href='https://www.wikiwand.com/it/Institute_of_Electrical_and_Electronics_Engineers' target='_blank'>IEEE</a> implementata nalla maggior parte dell'hardware dei computer e familiare ai programmatori. Una istanza di <code>Decimal</code> può  rappresentare esattamente qualsiasi numero, arrotondarlo per eccesso o difetto, ed applicare un limite al numero delle cifre significative.
</testo_normale>
<titolo_2>
Decimal
</titolo_2>
<testo_normale>
I valori decimali sono rappresentati come istanze della classe <code>Decimal</code>. Il costruttore riceve come argomento un intero od una stringa. Valori a virgola mobile possono essere convertiti in stringa prima di sessere usati per creare un <code>Decimal</code>, consentendo al chiamante di gestire esplicitamente il numero di cifre per valori che non possono essere espressi esattamente usando le rappresentazioni hardware a virgola modile. Alternativamente, il metodo di classe <code>from_float()</code> converte all'esatta rappresentazione decimale.
</testo_normale>
<py_code>
# decimal_create.py

import decimal

fmt = '{0:<25} {1:<25}'

print(fmt.format('Input', 'Output'))
print(fmt.format('-' * 25, '-' * 25))

# Intero
print(fmt.format(5, decimal.Decimal(5)))

# Stringa
print(fmt.format('3.14', decimal.Decimal('3.14')))

# Virgola mobile
f = 0.1
print(fmt.format(repr(f), decimal.Decimal(str(f))))
print('{:<0.23g} {:<25}'.format(
    f,
    str(decimal.Decimal.from_float(f))[:25])
)

</py_code>
'
<testo_normale>
Il valore a virgola mobile di <code>0.1</code> non è rappresentato come valore esatto in binario, quindi la rappresentazione come <code>float</code> è diversa dal valore <code>Decimal</code>. L'intera rappresentazione stringa è troncata a 25 caratteri nell'ultima riga del risultato.
</testo_normale>
<py_output>
$ python3 decimal_create.py
Input                     Output
------------------------- -------------------------
5                         5
3.14                      3.14
0.1                       0.1
0.10000000000000000555112 0.10000000000000000555111
</py_output>
<testo_normale>
I <code>Decimal</code>  possono anche essere creati da tuple che contengano un segno (<code>0</code> positivo, <code>1</code> negativo), una tupla di cifre ed un esponente intero.
</testo_normale>
<py_code>
# decimal_tuple.py

import decimal

# Tuple
t = (1, (1, 1), -2)
print('Input  :', t)
print('Decimal:', decimal.Decimal(t))
</py_code>
<testo_normale>
La rappresentazione basata sulla tupla è meno conveniente da creare, ma offre un modo portabile per esportare valori decimali senza perdere precisione. La forma in tupla può essere trasmessa attraverso una rete oppure essere conservata in un database che non supporti valori decimali accurati, quindi riconvertita in una istanza di <code>Decimal</code> successivamente.
</testo_normale>
<py_output>
$ python3 decimal_tuple.py

Input  : (1, (1, 1), -2)
Decimal: -0.11
</py_output>
<titolo_2>
Formattazione
</titolo_2>
<testo_normale>
I <code>Decimal</code> si conformano al <a href='https://docs.python.org/3.5/library/string.html#formatspec' target='_blank'>protocollo di formattazione di stringhe</a> usando le stesse sintassi ed opzioni degli altri tipi numerici.
</testo_normale>
<py_code>
# decimal_format.py

import decimal

d = decimal.Decimal(1.1)
print('Precisione:')
print('{:.1}'.format(d))
print('{:.2}'.format(d))
print('{:.3}'.format(d))
print('{:.18}'.format(d))

print('\nLarghezza e precisione combinate:')
print('{:5.1f} {:5.1g}'.format(d, d))
print('{:5.2f} {:5.2g}'.format(d, d))
print('{:5.2f} {:5.2g}'.format(d, d))

print('\nRiempimento con Zero:')
print('{:05.1}'.format(d))
print('{:05.2}'.format(d))
print('{:05.3}'.format(d))
</py_code>
<testo_normale>
Le stringhe di formato possono controllare la larghezza dell'output, la precisione (il numero di cifre significative), e come allineare il valore per riempire la larghezza.
</testo_normale>
<py_output>
$ python3 decimal_format.py

Precisione:
1
1.1
1.10
1.10000000000000009

Larghezza e precisione combinate:
  1.1     1
 1.10   1.1
 1.10   1.1

Riempimento con Zeri:
00001
001.1
01.10
</py_output>
<titolo_2>
Aritmetica
</titolo_2>
<testo_normale>
<code>Decimal</code> fa un <em>overload</em> degli operatori matematici semplici, quindi le istanze possono essere manipolate in modo pressochè uguale ai tipi numerici <em>built-in</em>.
</testo_normale>
<py_code>
# decimal_operators.py

import decimal

a = decimal.Decimal('5.1')
b = decimal.Decimal('3.14')
c = 4
d = 3.14

print('a     =', repr(a))
print('b     =', repr(b))
print('c     =', repr(c))
print('d     =', repr(d))
print()

print('a + b =', a + b)
print('a - b =', a - b)
print('a * b =', a * b)
print('a / b =', a / b)
print()

print('a + c =', a + c)
print('a - c =', a - c)
print('a * c =', a * c)
print('a / c =', a / c)
print()

print('a + d =', end=' ')
try:
    print(a + d)
except TypeError as e:
    print(e)
</py_code>
<testo_normale>
Gli operatori di <code>Decimal</code> accettano argomenti interi, ma i valori a virgola mobile devono essere convertiti in istanze <code>Decimal</code>.
</testo_normale>
<py_output>
$ python3 decimal_operators.py

a     = Decimal('5.1')
b     = Decimal('3.14')
c     = 4
d     = 3.14

a + b = 8.24
a - b = 1.96
a * b = 16.014
a / b = 1.624203821656050955414012739

a + c = 9.1
a - c = 1.1
a * c = 20.4
a / c = 1.275

a + d = unsupported operand type(s) for +: 'decimal.Decimal' and 'float'
</py_output>
<testo_normale>
Altre all'aritmetica basica, <code>Decimal</code> include metodi per trovare i <a href='https://www.wikiwand.com/it/Logaritmo' target='_blank'>logaritmi</a> naturali ed a base 10. I valori di ritorno di <code>log10()</code> e <code>ln()</code> sono istanze <code>Decimal</code>.
</testo_normale>
<titolo_2>
Valori Speciali
</titolo_2>
<testo_normale>
Oltre agli attesi valori numerici, <code>Decimal</code> può rappresentare parecchi valori speciali, inclusi valori positivi e negativo per Infinity (infinito) e NaN (non un numero) e zero.
</testo_normale>
<py_code>
# decimal_special.py

import decimal

for value in ['Infinity', 'NaN', '0']:
    print(decimal.Decimal(value), decimal.Decimal('-' + value))
print()

# Math with infinity
print('Infinity + 1:', (decimal.Decimal('Infinity') + 1))
print('-Infinity + 1:', (decimal.Decimal('-Infinity') + 1))

# Print comparing NaN
print(decimal.Decimal('NaN') == decimal.Decimal('Infinity'))
print(decimal.Decimal('NaN') != decimal.Decimal(1))
</py_code>
<testo_normale>
Aggiungendo valori ad infinito si ottiene sempre un altro valore infinito. Un confronto di uguaglianza con <code>NaN</code> ritorna sempre <code>False</code> ed un confronto per ineguaglianza ritorna sempre <code>True</code>. Confrontare per un ordinamento contro <code>NaN</code> è indefinito e provoca un errore.
</testo_normale>
<py_output>
$ python3 decimal_special.py

Infinity -Infinity
NaN -NaN
0 -0

Infinity + 1: Infinity
-Infinity + 1: -Infinity
False
True
</py_output>
<titolo_2>
Contesto
</titolo_2>
<testo_normale>
Fin qui tutti gli esempi hanno usato i comportamenti predefiniti del modulo <strong>decimal</strong>. E' possibile sostituire questi valori come la precisione mantenuta, come viene eseguito l'arrotondamento, la gestione degli errori ecc., usando un <em>contesto</em>. I contesti possono essere applicati alle istanze di <code>Decimal</code> in un thread o localmente all'interno di una piccola porzione di codice.
</testo_normale>
<titolo_3>
Contesto Corrente
</titolo_3>
<testo_normale>
Per ottenere il contesto corrente globale, si usa <code>getcontext()</code>.
</testo_normale>
<py_code>
# decimal_getcontext.py

import decimal

context = decimal.getcontext()

print('Emax     =', context.Emax)
print('Emin     =', context.Emin)
print('capitals =', context.capitals)
print('prec     =', context.prec)
print('rounding =', context.rounding)
print('flags    =')
for f, v in context.flags.items():
    print('  {}: {}'.format(f, v))
print('traps    =')
for t, v in context.traps.items():
    print('  {}: {}'.format(t, v))
</py_code>
<testo_normale>
Lo script di esempio mostra le proprietà pubbliche di un <code>Context</code>
</testo_normale>
<py_output>
$ python3 decimal_getcontext.py

Emax     = 999999
Emin     = -999999
capitals = 1
prec     = 28
rounding = ROUND_HALF_EVEN
flags    =
  <class 'decimal.InvalidOperation'>: False
  <class 'decimal.FloatOperation'>: False
  <class 'decimal.DivisionByZero'>: False
  <class 'decimal.Overflow'>: False
  <class 'decimal.Underflow'>: False
  <class 'decimal.Subnormal'>: False
  <class 'decimal.Inexact'>: False
  <class 'decimal.Rounded'>: False
  <class 'decimal.Clamped'>: False
traps    =
  <class 'decimal.InvalidOperation'>: True
  <class 'decimal.FloatOperation'>: False
  <class 'decimal.DivisionByZero'>: True
  <class 'decimal.Overflow'>: True
  <class 'decimal.Underflow'>: False
  <class 'decimal.Subnormal'>: False
  <class 'decimal.Inexact'>: False
  <class 'decimal.Rounded'>: False
  <class 'decimal.Clamped'>: False
</py_output>
<titolo_3>
Precisione
</titolo_3>
<testo_normale>
L'attributo <code>prec</code> del contesto controlla la precisione mantenuta per i nuovi valori creati come risultato di operazioni aritmetiche. I valori letterali sono mantenuti come descritti.
</testo_normale>
<py_code>
# decimal_precision.py

import decimal

d = decimal.Decimal('0.123456')

for i in range(1, 5):
    decimal.getcontext().prec = i
    print(i, ':', d, d * 1)
</py_code>
<testo_normale>
Per modificare la precisione, si assegna un nuovo valore tra <code>1</code> e <code>decimal.MAX_PREC</code> direttamento all'attributo.
</testo_normale>
<py_output>
$ python3 decimal_precision.py

1 : 0.123456 0.1
2 : 0.123456 0.12
3 : 0.123456 0.123
4 : 0.123456 0.1235
</py_output>
<titolo_3>
Arrotondamento
</titolo_3>
<testo_normale>
Ci sono parecchie opzioni di arrotondamento per mantenere i valori alla precisione desiderata.
</testo_normale>
<deflist>
ROUND_CEILING|Arrotonda sempre per eccesso verso infinito.
ROUND_DOWN|Arrotonda sempre per difetto.
ROUND_FLOOR|Arrotonda sempre per difetto verso infinito negativo.
ROUND_HALF_DOWN|Arrotonda per eccesso se l'ultima cifra significativa è maggiore od uguale a 5, altrimanti per difetto.
ROUND_HALF_EVEN|Come ROUND_HALF_DOWN eccetto che se il valore è 5, viene esaminata la cifra precedente. Valori pari causano un arrotondamento per difetto e valori dispari per eccesso.
ROUND_HALF_UP|Come ROUND_HALF_DOWN eccetto che se l'ultima cifra significativa è 5, il valore viene arrotondato per eccesso.
ROUND_UP|Arrotonda per eccesso.
ROUND_05UP|Arrotonda per eccesso se l'ultima cifra è 0 o 5, altrimenti per difetto.
</deflist>
<py_code>
# decimal_rounding.py

import decimal

context = decimal.getcontext()

ROUNDING_MODES = [
    'ROUND_CEILING',
    'ROUND_DOWN',
    'ROUND_FLOOR',
    'ROUND_HALF_DOWN',
    'ROUND_HALF_EVEN',
    'ROUND_HALF_UP',
    'ROUND_UP',
    'ROUND_05UP',
]

header_fmt = '{:10} ' + ' '.join(['{:^8}'] * 6)

print(header_fmt.format(
    ' ',
    '1/8 (1)', '-1/8 (1)',
    '1/8 (2)', '-1/8 (2)',
    '1/8 (3)', '-1/8 (3)',
))
for rounding_mode in ROUNDING_MODES:
    print('{0:10}'.format(rounding_mode.partition('_')[-1]),
          end=' ')
    for precision in [1, 2, 3]:
        context.prec = precision
        context.rounding = getattr(decimal, rounding_mode)
        value = decimal.Decimal(1) / decimal.Decimal(8)
        print('{0:^8}'.format(value), end=' ')
        value = decimal.Decimal(-1) / decimal.Decimal(8)
        print('{0:^8}'.format(value), end=' ')
    print()
</py_code>
<testo_normale>
Questo programma mostra gli effetti dell'arrotondamento dello stesso valore con diversi livelli di precisione usando diversi algoritmi.
</testo_normale>
<py_output>
$ python3 decimal_rounding.py

           1/8 (1)  -1/8 (1) 1/8 (2)  -1/8 (2) 1/8 (3)  -1/8 (3)
CEILING      0.2      -0.1     0.13    -0.12    0.125    -0.125
DOWN         0.1      -0.1     0.12    -0.12    0.125    -0.125
FLOOR        0.1      -0.2     0.12    -0.13    0.125    -0.125
HALF_DOWN    0.1      -0.1     0.12    -0.12    0.125    -0.125
HALF_EVEN    0.1      -0.1     0.12    -0.12    0.125    -0.125
HALF_UP      0.1      -0.1     0.13    -0.13    0.125    -0.125
UP           0.2      -0.2     0.13    -0.13    0.125    -0.125
05UP         0.1      -0.1     0.12    -0.12    0.125    -0.125
</py_output>
<titolo_3>
Contesto Locale
</titolo_3>
<testo_normale>
Il contesto si può applicare ad un blocco di codice con l'istruzione <code>with</code> .
</testo_normale>
<py_code>
# decimal_context_manager.py

import decimal

with decimal.localcontext() as c:
    c.prec = 2
    print('Precisione locale:', c.prec)
    print('3.14 / 3 =', (decimal.Decimal('3.14') / 3))

print()
print('Precisione predefinita:', decimal.getcontext().prec)
print('3.14 / 3 =', (decimal.Decimal('3.14') / 3))
</py_code>
<testo_normale>
<code>Context</code> supporta l'<a href='https://it.wikipedia.org/wiki/Application_programming_interface' target='_blank'>API</a>  del gestore di contesto usata da <code>with</code> quindi le impostazioni vengono applicate solo all'interno del blocco.
</testo_normale>
<py_output>
$ python3 decimal_context_manager.py

Precisione locale: 2
3.14 / 3 = 1.0

Precisione predefinita: 28
3.14 / 3 = 1.046666666666666666666666667
</py_output>
<titolo_3>
Contesto Per Istanza
</titolo_3>
<testo_normale>
Un <code>Context</code> può anche essere usato per costruire istanze di <code>Decimal</code>, che ereditano gli argomenti di precisione ed arrotondamento dalla conversione dal contesto.
</testo_normale>
<py_code>
# decimal_instance_context.py

import decimal

# Imposta un contesto con precisione limiata
c = decimal.getcontext().copy()
c.prec = 3

# Crea una propria costante
pi = c.create_decimal('3.1415')

# Il falore della costante viene arrotondato
print('PI GRECO :', pi)

# Il risultato derivato dall'uso della costante usa il contesto globale
print('RISULTATO:', decimal.Decimal('2.01') * pi)
</py_code>
<testo_normale>
Questo consente ad una applicazione di selezionare la precisione di valori costanti a parte rispetto alla precisione dei dati utente, ad esempio.
</testo_normale>
<py_output>
$ python3 decimal_instance_context.py

PI GRECO : 3.14
RISULTATO: 6.3114
</py_output>
<titolo_3>
Thread
</titolo_3>
<testo_normale>
Il contesto "globale" in realtà è locale rispetto al <a href='https://www.wikiwand.com/it/Processo_(informatica)#/Processi_e_thread' target='_blank'>thread</a>, quindi ogni thread può essere potenzialmente configurato usando valori diversi.
</testo_normale>
<py_code>
# decimal_thread_context.py

import decimal
import threading
from queue import PriorityQueue


class Multiplier(threading.Thread):
    def __init__(self, a, b, prec, q):
        self.a = a
        self.b = b
        self.prec = prec
        self.q = q
        threading.Thread.__init__(self)

    def run(self):
        c = decimal.getcontext().copy()
        c.prec = self.prec
        decimal.setcontext(c)
        self.q.put((self.prec, a * b))


a = decimal.Decimal('3.14')
b = decimal.Decimal('1.234')
# Una PriorityQueue ritornerà valori ordinati per precisione,
# a prescindere dall'ordine nel quale i thread finiscono.
q = PriorityQueue()
threads = [Multiplier(a, b, i, q) for i in range(1, 6)]
for t in threads:
    t.start()

for t in threads:
    t.join()

for i in range(5):
    prec, value = q.get()
    print('{}  {}'.format(prec, value))
</py_code>
<testo_normale>
Questo esempio crea un nuovo contesto usando quello specificato, e lo installa all'interno di ogni thread.
</testo_normale>
<py_output>
$ python3 decimal_thread_context.py

1  4
2  3.9
3  3.87
4  3.875
5  3.8748
</py_output>
<vedi_anche>
https://docs.python.org/3.5/library/decimal.html|decimal|La documentazione della libreria standard per questo modulo
riferimenti_moduli_modificati.html|Note di portabilità|Note di portabilità per decimal
https://www.wikiwand.com/it/Numero_in_virgola_mobile|Wikipedia: Numero in virgola mobile|Articolo sulla rappresentazione ed aritmetica dei numeri a virgola mobile.
https://docs.python.org/tutorial/floatingpoint.html|Floating Point Arithmetic: Issues and Limitations|Articolo dai tutorial Python che descrive i problemi relativi alla aritmetica dei numeri a virgola mobile.
</vedi_anche>
</documento_tradotto>
