<?xml version="1.0" encoding="Latin-1"?>
<categoria>componenti dell'applicazione</categoria>
<!-- # tag <descrizione> contiene le voci per la tabella di riepilogo iniziale -->
<!-- # tag <descrizione> contiene le voci per la tabella di riepilogo iniziale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- tag <testo_normale> contiene il testo normale dell'articolo -->
<!-- tag <titolo_2> contiene il testo per l'intestazione di un paragrafo -->
<!-- tag <py_code> contiene il testo che rappresenta delle istruzioni python -->
<!-- tag <py_output> contiene il testo che rappresenta l'output di uno script python -->
<!-- tag <vedi_anche> contiene il testo che rappresentano i riferimenti esterni -->
<!-- tag <lista> ogni riga all'interno del tag rappresenta una riga di una lista non ordinata'-->
<documento_tradotto>
<titolo_1>
getopt - Elabora le Opzioni di Riga di Comando
</titolo_1>
<descrizione>
Elabora le opzioni di riga di comando

</descrizione>
<testo_normale>
Il modulo <strong>getopt</strong> è l'elaboratore originale di opzioni da riga di comando che supporta le convenzioni stabilite dalla funzione Unix  <code>getopt</code>. Elabora una sequenza di argomenti tipo <code>sys.argv</code> e restituisce una sequenza di tuple che contengono coppie di valori opzione e argomento ed una sequenza di argomenti non abbinati ad una opzione.
</testo_normale>
<testo_normale>
La sintassi delle opzioni supportata comprende la versione corta e lunga:
</testo_normale>
<lista>
-a
-bvalore
-b valore
--nessunargomento
--conargomento=valore
--conargomento valore
</lista>
<note>
<code>getopt</code> non è deprecato, ma <a href='argparse.html' class="alert-link" target='_blank'>argparse</a> è mantenuto più attivamente e dovrebbe essere usato per nuovi sviluppi.
</note>
<titolo_2>
Argomenti della Funzione
</titolo_2>
<testo_normale>
La funzione <code>getopt()</code> riceve tre argomenti:
</testo_normale>
<lista>
Il primo è la sequenza di argomenti da analizzare. In genere deriva da <code>sys.argv[1:]</code> (viene ignorato il nome del programma in <code>sys.argv[0]</code>).
Il secondo argomento è la stringa di definizione dell'opzione a carattere singolo. Se una delle opzioni richiede un argomento, la sua lettera viene seguita da <code>:</code>.
Il terzo argomento, se usato, dovrebbe essere una sequenza di nomi di opzioni nella versione "lunga". La versione lunga delle opzioni può essere più di un singolo carattere, tipo <code>--noarg</code> oppure <code>--witharg</code>. I nomi dell'opzione nella sequenza non dovrebbero comprendere il prefisso <code>--</code>. Se una opzione lunga richiede un argomento, il suo nome dovrebbe avere come suffisso <code>=</code>.
</lista>
<testo_normale>
La forma breve e la forma lunga possono essere combinate in una unica chiamata.
</testo_normale>
<titolo_2>
Forma Breve di Opzioni
</titolo_2>
<testo_normale>
Questo esempio accetta 3 opzioni, <code>-a</code> è un semplice <em>flag</em>, <code>-b</code> e <code>c</code> richiedono un argomento. La stringa della definizione dell'opzione dovrebbe essere <code>"ab:c:"</code>.
</testo_normale>
<py_code>
# getopt_short.py
</py_code>
<testo_normale>
Il programma passa un elenco di valori di opzione simulati a <code>getopt()</code> per mostrare il modo nel quale sono elaborati.
</testo_normale>
<py_output>
$ python3 getopt_short.py
</py_output>
<titolo_2>
Forma Lunga di Opzioni
</titolo_2>
<testo_normale>
Per un programma che accetta 2 opzioni, <code>--noarg</code> e <code>--witharg</code> la sequenza degli argomenti nella versione lunga dovrebbe essere <code>[ 'noarg', 'witharg=' ]</code>.
</testo_normale>
<py_code>
# getopt_long.py
</py_code>
<testo_normale>
Visto che questo programma di esempio non accetta alcuna opzione nella versione breve, il secondo argomento per <code>getopt()</code> è una stringa vuota.
</testo_normale>
<py_output>
$ python3 getopt_long.py
</py_output>
<titolo_2>
Un Esempio Completo
</titolo_2>
<testo_normale>
Di sequito un programma di esempio più completo che richiede 5 opzioni: <code>-o</code>, <code>-v</code>, <code>--output</code>, <code>--verbose</code>, e <code>--version</code>. Le opzioni <code>-o</code>, <code>--output</code>, e <code>--version</code> richiedono ciascuna un argomento
</testo_normale>
<py_code>
# getopt_example.py
</py_code>
<testo_normale>
Il programma può essere chiamato in diversi modi. Quando viene chiamato senza argomenti, vengono utilizzate le impostazioni predefinte.
</testo_normale>
<py_output>
$ python3 getopt_example.py
</py_output>
<testo_normale>
Un opzione breve (ad una lettera) può esere divisa dal proprio argomento da un carattere di spaziatura:
</testo_normale>
<py_output>
$ python3 getopt_example.py -o foo
</py_output>
<testo_normale>
Oppure opzione e valore possono essere combinati in un singolo argomento:
</testo_normale>
<py_output>
$ python3 getopt_example.py -ofoo
</py_output>
<testo_normale>
Allo stesso modo una opzione nella forma lunga può essere separata dal suo valore:
</testo_normale>
<py_output>
$ python3 getopt_example.py --output foo
</py_output>
<testo_normale>
Quando una opzione lunga viene combinata con il suo valore, il nome dell'opzione ed il valore dovrebbero essere separati da un singolo <code>=</code>:
</testo_normale>
<py_output>
$ python3 getopt_example.py --output=foo
</py_output>
<titolo_2>
Abbreviazione della Forma Lunga di Opzioni
</titolo_2>
<testo_normale>
L'opzione a forma lunga non necessita che sia passata interamente, fintanto che viene passato un prefisso univoco:
</testo_normale>
<py_output>
$ python3 getopt_example.py --o foo
</py_output>
<testo_normale>
Se non viene passato un prefisso univoco viene sollevata una eccezione
</testo_normale>
<py_output>
$ python3 getopt_example.py --ver 2.0
</py_output>
<titolo_2>
Elaborazione di Opzioni in Stile GNU
</titolo_2>
<testo_normale>
In genere, l'elaborazione delle opzioni si interrompe non appena viene rilevato il primo argomento che non appartiene ad una opzione
</testo_normale>
<py_output>
$ python3 getopt_example.py -v not_an_option --output foo
</py_output>
<testo_normale>
Per mescolare argomenti di opzione e non sulla riga di comando in qualsiasi ordine si utilizzi <code>gnu_getopt()</code>.
</testo_normale>
<py_code>
# getopt_gnu.py
</py_code>
<testo_normale>
Dopo avere modificato la chiamata nell'esempio precedente, la differenza appare chiara:
</testo_normale>
<py_output>
$ python3 getopt_gnu.py -v not_an_option --output foo
</py_output>
<titolo_2>
Fine dell'Elaborazione di Argomenti
</titolo_2>
<testo_normale>
Se <code>getopt()</code> trova <code>--</code> negli argomenti in input, interrompe l'elaborazione degli argomenti restanti come opzioni. Questa caratteristica può essere usata per passare valori di argomento  che sembrano opzioni, tipo nomi di file che iniziano con un trattino ("-")
</testo_normale>
<py_output>
$ python3getopt_example.py -v -- --output foo
ARGV      : ['-v', '--', '--output', 'foo']
OPZIONI   : [('-v', '')]
VERSION   : 1.0
VERBOSE   : True
OUTPUT    : default.out
RIMASTI   : ['--output', 'foo']
</py_output>
<vedi_anche>
https://docs.python.org/3.6/library/getopt.html|getopt|La documentazione della libreria standard per questo modulo.
argparse.html|argparse|Il modulo <strong>argparse</strong> sostituisce <strong>getopt</strong> per nuove applicazioni
</vedi_anche>
</documento_tradotto>
