<?xml version="1.0" encoding="Latin-1"?>
<categoria>Componenti Dell'Applicazione</categoria>
<documento_tradotto>
<titolo_1>
sched - Pianificatore di Eventi Temporizzati
</titolo_1>
<descrizione>
Pianificatore di eventi generico

</descrizione>
<testo_normale>
Il modulo <strong>sched</strong> implementa un pianificatore di eventi generico per eseguire compiti ad un orario specifico. La classe per la pianificazione usa una funzione <code>time</code> per ottenere l'orario corrente ed una funzione <code>delay</code> per attendere uno specifico periodo di tempo. Le effettive unità temporali non sono importanti, il che rende l'interfaccia sufficientemente flessibile per l'utilizzo per molti scopi.
</testo_normale>
<testo_normale>
La funzione <code>time</code> viene chiamata senza argomenti, e dovrebbe ritornare un numero che rappresenta l'orario corrente. La funzione <code>delay</code> viene chiamata con un intero come singolo argomento, usando la stessa scala della funzione <code>time</code>, e dovrebbe attendere quelle unità temporali indicate prima di ritornare. Nella modalità predefinita, sono usate le funzioni <code>monotonic()</code> e <code>sleep</code> dal modulo <a href='time.html' target='_blank'>time</a>, ma gli esempi di questo articolo usano <code>time.time()</code>, anche questa in possesso di tutti i requisiti, poichè facilita la comprensione del risultato.
</testo_normale>
<testo_normale>
Per supportare applicazioni a <em>thread</em> multipli, la funzione di attesa viene chiamata con argomento <code>0</code> dopo la generazione di ciascun evento, per assicurarsi che gli altri <em>thread</em> abbiano anch'essi una possibilità di essere eseguiti.
</testo_normale>
<titolo_2>
Eseguire Eventi con un Periodo di Attesa
</titolo_2>
<testo_normale>
Gli eventi possono essere pianificati per una esecuzione dopo un periodo di attesa, oppure ad un dato orario. Per pianificarli con un periodo di attesa, si usi <code>enter()</code>, che riceve quattro argomenti:
</testo_normale>
<lista>
Un numero che rappresenta il periodo di attesa
Un valore di priorità
La funzione da chiamare
Una tupla di argomenti per la funzione
</lista>
<testo_normale>
Questo esempio pianifica due eventi differenti da eseguirsi rispettivamente dopo due e tre secondi. Quando scocca l'orario dell'evento, viene chiamato <code>print_event()</code>, che stampa l'orario corrente ed il nome dell'argomento passato all'evento
</testo_normale>
<py_code>
# sched_basic.py
</py_code>
<testo_normale>
L'esecuzione del programma produce:
</testo_normale>
<py_output>
$ python3 sched_basic.py
</py_output>
<testo_normale>
L'orario stampato per il primo evento è di due secondi dopo la partenza, e quello per il secondo è di tre secondi dopo la partenza.
</testo_normale>
<titolo_2>
Eventi Sovrapposti
</titolo_2>
<testo_normale>
La chiamata di <code>run()</code> blocca fino a quando tutti gli eventi sono stati elaborati. Ogni evento viene eseguito nello stesso <em>thread</em>, quindi se un evento impiega più tempo ad eseguirsi rispetto al periodo di attesa impostato tra gli eventi, ci sarà una sovrapposizione. La sovrapposizione viene risolta posticipando l'evento che segue più in là nel tempo. Nessun evento viene perso, ma alcuni eventi potrebbero essere chiamati in ritardo rispetto alla loro pianificazione. Nell'esempio di seguito, <code>long_event()</code> si mette in pausa artificialmente ma la pausa potrebbe altrettanto facilmente essere provocata da una attesa per una lunga operazione di calcolo oppure da un blocco in I/O-
</testo_normale>
<py_code>
# sched_overlap.py
</py_code>
<testo_normale>
Il risultato è che il secondo evento viene eseguito immediatamente dopo la fine del primo, visto che la durata di esecuzione del primo evento è dilatata oltre l'orario di partenza prefissato per il secondo evento.
</testo_normale>
<py_output>
$ python3 sched_overlap.py
</py_output>
<titolo_2>
Priorità degli Eventi
</titolo_2>
<testo_normale>
Se più di un evento è pianificato per lo stesso orario, saranno usati i propri valori di priorità per determinarne l'ordine di esecuzione.
</testo_normale>
<py_code>
# sched_priority.py
</py_code>
<testo_normale>
Per questo esempio è necessario assicurarsi che gli eventi siano pianificati per lo stesso preciso orario, quindi viene usato <code>enterabs()</code> in luogo di <code>enter()</code>. Il primo argomento per <code>enterabs()</code> è l'orario di esecuzione dell'evento, invece che il tempo di attesa.
</testo_normale>
<py_output>
$ python3 sched_priority.py
</py_output>
<titolo_2>
Cancellare Eventi
</titolo_2>
<testo_normale>
Sia <code>enter()</code> che <code>enterabs()</code> ritornano un riferimento all'evento, che può essere usato per cancellarlo successivamente. Visto che <code>run()</code> blocca, l'evento deve essere cancellato in un <em>thread</em> diverso. Per questo esempio un <em>thread</em> viene fatto partire per eseguire il pianificatore e il <em>thread</em> principale di elaborazione viene usato per cancellare l'evento.
</testo_normale>
<py_code>
# sched_cancel.py
</py_code>
<testo_normale>
Vengono pianificati due eventi, ma il primo viene successivamente cancellato. Solo il secondo viene eseguito, quindi la variabile contatore viene incrementata una sola volta.
</testo_normale>
<py_output>
$ python3 sched_cancel.py
</py_output>
<testo_normale>
</testo_normale>
<vedi_anche>
https://docs.python.org/3.7/library/sched.html|sched|La documentazione della libreria standard per questo modulo.
time.html|time|Il modulo <strong>time</strong>
</vedi_anche>
</documento_tradotto>
