<xml version="1.0" encoding="Latin-1"?>
<target>3</target>
<categoria></categoria>
<documento_tradotto>
<titolo_1>
Oltre la Libreria Standard - l'ecosistema di modulo fornito da terze parti
</titolo_1>
<descrizione>
Sebbena la libreria standard di Python sia vasta, esiste anche un robusto ecosistema di moduli fornito da sviluppatori di terze parti, disponibile dall'<a href='https://pypi.python.org/pypi' target='_blank'>Indice dei Pacchetti Python</a>. Questa appendice descrive alcuni di questi moduli, e le situazioni nelle quali potrebbe essere utile usarli come integrazione o rimpiazzo per la libreria standard.

</descrizione>
<titolo_2>
Testo
</titolo_2>
<testo_normale>
Il modulo <a href='string.html' target='_blank'>string</a> fornisce uno strumento di molto basico
</testo_normale>
<testo_normale>
Il modulo <strong>asyncio</strong> fornisce strumenti per costruire applicazioni concorrenti usando <em>coroutine</em>. Mentre il modulo <a href='threading.html' target='_blank'>threading</a> implementa la concorrenza attraverso <em>thread</em> di applicazione e <a href='multiprocessing.html' target='_blank'>multiprocessing</a> implementa la concorrenza usando processi di sistema, <strong>asyncio</strong> usa un approccio a <em>thread</em> singolo e processo singolo nel quale parti di un'applicazione cooperano per commutare compiti esplicitamente con tempistiche ottimali. Molto spesso questa commutazione di contesto  accade quando il programma sarebbe altrimenti bloccato in attesa di leggere o scrivere dati, ma <strong>asyncio</strong> include anche il supporto per pianificare l'esecuzione di codice ad una specifico spazio temporale futuro, per abilitare una <em>coroutine</em> ad attendere che un'altra si completi, per gestire segnali di sistema e per riconoscere altri eventi che possano costituire una ragione per un'applicazione per modificare quello su cui sta lavorando.
</testo_normale>
<titolo_2>
Concetti di Concorrenza Asincrona
</titolo_2>
<testo_normale>
La maggior parte dei programmi che usano altri modelli di concorrenza sono scritti linearmente, e fanno affidamento sulla gestione del <em>thread</em> o del processo del linguaggio in fase di esecuzione o del sistema operativo per cambiare contesto quando appropriato. Una applicazione basata su <strong>asyncio</strong> richiede che il suo codice gestisca esplicitamente i cambi di contesto, ed usi tecniche per fare questo correttamente dipende dalla comprensione di parecchi concetti interdipendenti.
</testo_normale>
<vedi_anche>
https://docs.python.org/3.7/library/asyncio.html|asyncio|La documentazione della libreria standard per questo modulo.
https://www.python.org/dev/peps/pep-3156|PEP 3156|Asynchronous IO Support Rebooted: the “asyncio” Module
https://www.python.org/dev/peps/pep-0380|PEP 380|Syntax for Delegating to a Subgenerator
https://www.python.org/dev/peps/pep-0492|PEP 492|Coroutines with async and await syntax
concurrent.futures.html|concurrent.futures.html|Gestisce insiemi di compiti concomitanti
socket.html|socket|Comunicazione di rete a basso livello
socketserver.html|socketserver|Infrastruttura per creare server di rete
signal.html|signal|Eventi di sistema asincroni
https://docs.python.org/3/whatsnew/3.6.html#asyncio|asyncio: What's new in Python 3.6|Sommario delle modifiche a <strong>asyncio</strong> mentre l'API si stabilizza in Python 3.6
https://pypi.python.org/pypi/trollius|trollius|Un <em>port</em> di Tulip, la versione originale di <strong>asyncio</strong> su Python 2
http://www.drdobbs.com/open-source/the-new-asyncio-module-in-python-34-even/240168401|The New asyncio Module in Python 3.4: Event Loops|Articolo di Gastón Hillar su Dr. Dobb’s
http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html|A Web Crawler With asyncio Coroutines|Un articolo su The Architecture of Open Source Applications di A. Jesse Jiryu Davis e Guido van Rossum
http://www.getoffmalawn.com/blog/playing-with-asyncio|Playing with asyncio|Un post sul blog di Nathan Hoad
https://blogs.gnome.org/markmc/2013/06/04/async-io-and-python/|Async I/O and Python|Un post sul blog di Mark McLoughlin
http://www.dabeaz.com/coroutines/|A Curious Course on Coroutines and Concurrency – PyCon 2009|Tutorial di David Beazley
http://www.snarky.ca/how-the-heck-does-async-await-work-in-python-3-5|How the heck does async/await work in Python 3.5|Un post sul blog di Brett Cannon
#|Unix Network Programming, Volume 1: The Sockets Networking API, 3/E|W. Richard Stevens, Bill Fenner, and Andrew M. Rudoff. Published pubblicato da Addison-Wesley Professional, 2004. ISBN-10: 0131411551
#|Foundations of Python Network Programminng, 3/E|Brandon Rhodes e John Goerzen. Pubblicato da Apress, 2014. ISBN-10: 1430258543
</vedi_anche>
</documento_tradotto>
