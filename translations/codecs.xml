<?xml version="1.0" encoding="Latin-1"?>
<target>3</target>
<categoria>Il file system</categoria><!-- # tag <descrizione> contiene le voci per la tabella di riepilogo iniziale -->
<!-- tag <testo_normale> contiene il testo normale dell'articolo -->
<!-- tag <titolo_2> contiene il testo per l'intestazione di un paragrafo -->
<!-- tag <py_code> contiene il testo che rappresenta delle istruzioni python -->
<!-- tag <py_output> contiene il testo che rappresenta l'outpu di uno script python -->
<documento_tradotto>
<titolo_1>
codecs - Codifica e Decodifica di Stringhe
</titolo_1>
<descrizione>
Codificatori e decodificatori per la conversione di testo tra diverse rappresentazioni

</descrizione>
<testo_normale>
Il modulo <strong>codecs</strong> fornisce flussi e interfacce file per trascodificare dati. E' più comunemente usato per lavorare con il testo Unicode, ma sono anche disponibili altre codifiche per altri scopi.
</testo_normale>
<titolo_2>
Elementi di Unicode
</titolo_2>
<testo_normale>
CPython 3.x distingue tra testo e stringhe di byte. Istanze <code>bytes</code> usano una sequenza di valori di 8 bit mentre le stringhe <code>str</code> sono gestite internamente come sequenza di code point (un valore numerico compreso nell'intervallo dei valori numerici disponibili per la codifica dei caratteri - n.d.t). I valori dei code point sono salvati come sequenza di 2 o 4 byte ciascuno, a seconda delle opzioni fornite quando Python è stato compilato.
</testo_normale>
<testo_normale>
Quando vengono stampati valori <code>str</code>, essi sono codificati usando uno dei parecchi schemi standard in modo che la sequenza di byte possa essere ricostruita corrispondendo alla stessa stringa di testo successivamente. I byte del valore codificato non sono necessariamente gli stessi dei code point, e la codifica definisce un modo per trascodificare i due insiemi di valori. La lettura di valori Unicode richiede anche la conoscenza della codifica in modo che i byte in arrivo possano essere convertiti nella rappresentazione interna usata dalla classe <code>unicode</code>.
</testo_normale>
<testo_normale>
Le codifiche più comuni per i linguaggi occidentali sono <code>UTF-8</code> e <code>UTF-16</code>, le quali usano rispettivamente sequenze di valori di uno o due byte per rappresentare ciascun code point. Altre codifiche possono essere più efficaci per conservare linguaggi dove la maggior parte dei caratteri sono rappresentati da code point che non possono essere compresi in due byte.
</testo_normale>
<titolo_2>
Codifiche
</titolo_2>
<testo_normale>
Il modo migliore per capire le codifiche è osservare le diverse serie di byte prodotte codificando la stessa stringa in modi diversi. Gli esempi seguenti usano questa funzione per formattare i byte della stringa per facilitarne la lettura.
</testo_normale>
<py_code>
# codecs_to_hex.py
</py_code>
<testo_normale>
La funzione usa <code>binascii</code> per ottenere la rappresentazione esadecimale dei byte della stringa in input, poi viene inserito uno spazio tra ogni <code>nbytes</code> byte prima di ritornare il valore.
</testo_normale>
<py_output>
$ python3 codecs_to_hex.py
</py_output>
<testo_normale>
Il primo esempio di codifica inizia stampando il testo <code>'français'</code> usando la rappresentazione raw della classe <code>unicode</code>, seguito dal nome di ciascun carattere dal database Unicode. Le successive due righe codificano la stringa rispettivamente in <code>UTF-8</code> e <code>UTF-16</code> e mostra i valori esadecimali risultanti dalla codifica.
</testo_normale>
<py_code>
# codecs_encodings.py
</py_code>
<testo_normale>
Il risultato della codifica di un oggetto <code>str</code> è un oggetto <code>bytes</code>.
</testo_normale>
<py_output>
$ python3 codecs_encodings.py
</py_output>
<testo_normale>
Data una sequenza di byte codificati come istanza di <code>bytes</code>, il metodo <code>decode()</code> li trascodifica in code point e ritorna la sequenza come istanza di <code>str</code>.
</testo_normale>
<py_code>
# codecs_decode.py
</py_code>
<testo_normale>
La scelta della codifica usata non cambia il tipo di risultato.
</testo_normale>
<py_output>
$ python3 codecs_decode.py
</py_output>
<titolo_2>
Lavorare con i file
</titolo_2>
<testo_normale>
Codificare e decodificare stringhe è particolarmente importante quando si ha a che fare con operazioni di I/O. A prescindere dal dover scrivere su un file, un socket od un altro canale, i dati devono usare l'opportuna codifica. In generale tutti i dati di testo devono essere decodificati dalla propria rappresentazione in byte in fase di lettura e codificati dai propri valori interni verso una rappresentazione specifica in fase di scrittura. Un programma può esplicitamente codificare e decodificare dati, ma a seconda della codifica usata può essere non triviale determinare se sono stati letti byte a sufficienza per decodificare interamente i dati. codecs fornisce classi per gestire la codifica e la decodifica dei dati, in modo che le applicazioni non debbano compiere questo lavoro.
</testo_normale>
<testo_normale>
L'interfaccia più semplice fornita da <strong>codecs</strong> è un'alternativa alla funzione built-in <code>open()</code>. La nuova versione funziona proprio come quella built-in, ma aggiunge due nuovi argomenti per specificare la codifica e la tecnica di gestione errori desiderata.
</testo_normale>
<py_code>
# codecs_open_write.py
</py_code>
<testo_normale>
Questo esempio inizia con una stringa <code>unicode</code> con "ç" e salva il testo in un file usando una codifica specificata da riga di comando.
</testo_normale>
<py_output>
$ python3 codecs_open_write.py
</py_output>
<testo_normale>
Leggere i dati con <code>open()</code> è lineare, con una avvertenza: la codifica deve essere conosciuta in anticipo, per poter impostare il decodificatore correttamente. Alcuni formati di dati tipo XML, specificano la codifica come parte del file, ma in genere spetta all'applicazione questa gestione. <strong>codecs</strong> riceve semplicemente la codifica come argomento ed assume che sia corretta.
</testo_normale>
<py_code>
# codecs_open_read.py
</py_code>
<testo_normale>
Questo esempio legge i file creati dall'esempio precedente, e stampa alla console la rappresentazione dell'oggetto <code>unicode</code> risultante
</testo_normale>
<py_output>
$ python3 codecs_open_read.py
</py_output>
<titolo_2>
Ordine dei Byte
</titolo_2>
<testo_normale>
Le codifiche multi-byte tipo UTF-16 ed UTF-32 pongono un problema quando si devono trasferire dati da diversi sistemi, sia copiando direttamente il file che tramite comunicazione di rete. Sistemi diversi utilizzano ordinamenti diversi dei byte alti e bassi. Questa caratteristica dei dati, nota come <a href='https://www.wikiwand.com/it/Ordine_dei_byte' target='_blank'>endianness</a>  dipende da fattori tipo l'architettura hardware e le scelta fatte dal sistema operativo e dagli sviluppatori dell'applicazione. Non sempre è noto in anticipo quale ordine di byte usare per un certo insieme di dati, quindi le codifiche multi-byte includono un marcatore di ordine di byte (BOM) come primi byte dell'output codificato. Ad esempio, UTF-16 è definito in modo tale che 0xFFFE e 0xFEFF non sono caratteri validi, e possono essere usati per indicare l'ordine di byte. <strong>codecs</strong> definisce costanti per i marcatori BOM usati da UTF-16 ed UTF-32.
</testo_normale>
<py_code>
# codecs_bom.py
</py_code>
<testo_normale>
<code>BOM</code>, <code>BOM_UTF16</code> e <code>BOM_UTF32</code> sono automaticamente impostati per utilizzare gli appropriati valori big-endian o little-endian a seconda dell'ordine dei byte nativo del sistema operativo.
</testo_normale>
<py_output>
$ python3 codecs_bom.py
</py_output>
<testo_normale>
L'ordinamento dei byte viene rilevato e gestito automaticamente dai decodificatori in <strong>codecs</strong>, ma può essere specificato un ordinamento esplicito nella codifica.
</testo_normale>
<py_code>
# codecs_bom_create_file.py
</py_code>
<testo_normale>
<code>codecs_bom_create_file.py</code> è in grado di rilevare l'ordinamento dei byte nativo, poi usa la forma alternativa esplicita in modo che l'esempio successivo possa dimostrare l'auto rilevamento durante la lettura.
</testo_normale>
<py_output>
$ python3 codecs_bom_create_file.py
</py_output>
<testo_normale>
<code>codecs_bom_create_detection.py</code> non specifica un ordine di byte all'apertura del file, quindi il decodificatore usa il valore BOM nei primi due byte del file per determinarlo.
</testo_normale>
<py_code>
# codecs_bom_detection.py
</py_code>
<testo_normale>
Visto che i primi due byte del file sono usati per il rilevamento dell'ordine dei byte, non sono inclusi nei dati ritornati da <code>read()</code>.
</testo_normale>
<py_output>
$ python3 codecs_bom_detection.py
</py_output>
<titolo_2>
Gestione degli Errori
</titolo_>
<testo_normale>
La sezione precedente evidenziava la necessità di sapere in anticipo la codifica utilizzata durante la lettura e scrittura di file Unicode. Impostare correttamente la codifica è importante per due ragioni. Se la codifica è configurata nel modo sbagliato durante la lettura di un file, i dati saranno male interpretati a potrebbero corrompersi o semplicemente fallirebbe la codifica. Non tutti i caratteri Unicode possono essere rappresentati in utte le codifiche; alla stessa stregua una errata codifica in scrittura potrebbe generare errori e perdita di dati.
</testo_normale>
<testo_normale>
<strong>codces</strong> usa le stesse cinque opzioni di gestione errore fornite dai metodi encode() di str e decode() di bytes, elencati di seguito:
</testo_normale>
<tabella_normale>
MODALITA' ERRORE;DESCRIZIONE
<code>strict</code>;Solleva una eccezione se i dati non possono essere convertiti.
<code>replace</code>;Sositituisce con un carattere speciale marcatore i dati che non possono essere codificati
<code>ignore</code>;Ignora i dati
<code>xmlcharrefreplace</code>;Carattere XML (solo in codifica)
<code>backslashreplace</code>;Sequenza di escape (solo in codifica)
</tabella_normale>
<titolo_>
Codificare Errori
</titolo_>
<testo_normale>
La condizione di errore più comune è ricevere un errore <code>UnicodeEncodeError</code> quando si scrivono dati Unicode in un canale di uscita ASCII, tipo un normale file oppure <cede>sys.stdout</cede> senza un insieme di codifica robusto. Il programma di esempio seguente piò essere usato per sperimentare le diverse modalità di gestione errori.
</testo_normale>
<py_code>
# codecs_encode_error.py
</py_code>
<testo_normale>
Sebbene la modalità <code>strict</code> sia la più sicura per assicurarsi che un'applicazione imposti esplicitamente la codifica corretta per tutte le operazioni di I/O, potrebbe condurre a blocchi dei programmi quando viene sollevata una eccezione.
</testo_normale>
<py_output>
$ python3 codecs_encode_error.py
</py_output>
<testo_normale>
Alcune delle altre modalità di gestione errore sono più flessibili. Ad esempio <code>replace</code> assicura che nessuna eccezione viene sollevata, a scapito di possibili perdite dei dati che non possono essere convertiti nella codifica richiesta. Il carattere Unicode per la cediglia non può essere codificato in ASCII, ma viene sostituito nel risultato da un <code>?</code> senza generare errori.
</testo_normale>
<py_output>
$ codecs_encode_error.py replace
</py_output>
<testo_normale>
Per non avere interamente a che fare con problemi di dati si usi <code>ignore</code>. Tutti i dati che non possono essere codificati sono ignorati.
</testo_normale>
<py_output>
$ python3 codecs_encode_error.py ignore
</py_output>
<testo_normale>
Ci sono due opzioni di gestione errori senza perdita di dati, entrambe prevedono la sostituzione del carattere con una sua rappresentazione alternativa definita da uno standard a parte rispetto alla codifica, <code>xmlcharrefreplace</code> utilizza un riferimento di carattere XML come sostituto (la lista dei caratteri è specificata nel documento <em>W3C XML Entity Definitions for Characters)</em>.
</testo_normale>
<py_output>
$ python3 codecs_encode_error.py xmlcharrefreplace
</py_output>
<testo_normale>
L'altro schema di gestione errore senza perdita di dati è <code>bachslashreplace</code> che produce un risultato in uscita come il valore ritornato chiamando <code>repr()</code> su di un oggetto <code>unicode</code>. I caratteri Unicode sono sostituiti da \u seguito dal valore esadecimale del code point.
</testo_normale>
<py_output>
$ python3 codecs_encode_error.py backslashreplace
</py_output>
<titolo_2>
Errori di Decodifica
</titolo_2>
<testo_normale>

</testo_normale>
<vedi_anche>
http://docs.python.org/library/gettext.html|gettext|La documentazione della libreria standard per questo modulo
locale.html|locale|Altri strumenti di localizzazione
http://www.gnu.org/software/gettext/|GNU gettext|I formati del catalogo messaggi, API, ecc. per questo modulo sono tutti basati sul pacchetto gettext originale da GNU. I formati del file catalogo sono compatibili, e gli script da riga di comando hanno opzioni simili (se non identiche). Il <a href='http://www.gnu.org/software/gettext/manual/gettext.html'>manuale GNU gettext</a> (in inglese - n.d.t.) ha una descrizione dettagliata sui formati di file e descrive le versioni GNU degli strumenti per lavorarci.
http://legacy.python.org/workshops/1997-10/proceedings/loewis.html|Internazionalizzare Python|Un documento di Martin von Löwis (in inglese - n.d.t.) riguardo alle tecniche per l'internazionalizzazione delle applicazioni Python.
http://docs.djangoproject.com/en/dev/topics/i18n/|Internazionalizzare Django|Un'altra buona fonte di informazione (in inglese - n.d.t.) sull'uso di gettext, inclusi esempi reali.
</vedi_anche>
</documento_tradotto>
</descrizione>
